# Spring AI Demo 应用配置
spring:
  application:
    name: spring-ai-demo
    
  # 数据库配置
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/postgres}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      
  # JPA 配置
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:update}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        show_sql: false
        
  # Spring AI 配置
  ai:
    # OpenAI 配置
    openai:
      api-key: ${OPENAI_API_KEY:sk-TXybYLhGOVTzaQqFWuvKOsjc4VBwcpRfbcJZXTVjy7u2XSIk}
      base-url: https://api.openai-hub.com
      chat:
        options:
          model: ${OPENAI_CHAT_MODEL:gpt-4o}
          temperature: ${OPENAI_TEMPERATURE:0.7}
      embedding:
        options:
          model: ${OPENAI_EMBEDDING_MODEL:text-embedding-3-small}

    # 向量存储配置
    vectorstore:
      pgvector:
        index-type: ${PGVECTOR_INDEX_TYPE:HNSW}
        distance-type: ${PGVECTOR_DISTANCE_TYPE:COSINE_DISTANCE}
        dimensions: ${PGVECTOR_DIMENSIONS:1536}
        initialize-schema: ${PGVECTOR_INIT_SCHEMA:true}
        schema-name: ${PGVECTOR_SCHEMA:public}
        table-name: ${PGVECTOR_TABLE:vector_store}
        max-document-batch-size: ${PGVECTOR_BATCH_SIZE:10000}
        schema-validation: true

# 服务器配置
server:
  port: ${SERVER_PORT:8080}

# 日志配置
logging:
  level:
    org.springframework.ai: ${LOG_LEVEL_AI:INFO}
    com.example.springai: ${LOG_LEVEL_APP:INFO}
    org.springframework.jdbc: ${LOG_LEVEL_JDBC:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized