version: '3.8'

services:
  # 主应用服务
  app:
    build: .
    container_name: enterprise-kb-app
    ports:
      - "8080:8080"
    environment:
      # 数据库配置
      - DATABASE_URL=jdbc:postgresql://postgres:5432/knowledge_base
      - DATABASE_USERNAME=kb_user
      - DATABASE_PASSWORD=kb_password
      - DATABASE_DRIVER=org.postgresql.Driver
      - HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      
      # Redis配置
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # AI模型配置
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your-openai-api-key}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-your-anthropic-api-key}
      
      # 应用配置
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
      
      # 文档存储配置
      - DOCUMENT_STORAGE_PATH=/app/uploads
      
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - kb-network

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: enterprise-kb-postgres
    environment:
      - POSTGRES_DB=knowledge_base
      - POSTGRES_USER=kb_user
      - POSTGRES_PASSWORD=kb_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kb_user -d knowledge_base"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - kb-network

  # Redis向量存储
  redis:
    image: redis:7-alpine
    container_name: enterprise-kb-redis
    command: redis-server --appendonly yes --requirepass redis_password
    environment:
      - REDIS_PASSWORD=redis_password
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - kb-network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: enterprise-kb-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - kb-network

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: enterprise-kb-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - kb-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: enterprise-kb-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - kb-network

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 网络
networks:
  kb-network:
    driver: bridge